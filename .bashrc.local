stty -ixon
shopt -s globstar

parse_git_branch() { b=$(git branch --show-current 2> /dev/null); echo ${b:+" ($b)"}; }
PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$(parse_git_branch)\[\033[00m\]\$ '

[ -f ~/.bash_aliases ] && . ~/.bash_aliases
[ -f ~/.bash_secrets ] && . ~/.bash_secrets

alias config="/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME"
export VISUAL=vim
export EDITOR="$VISUAL"
export PERL_MM_USE_DEFAULT=1
export IGNOREEOF=2
export PAGER=less
export LESS=-XRi
export LANG='en_US.UTF-8'


export CLICOLOR=1



tarz () { tar -I pigz -cf $1.tgz $1; }
commit () { git commit -am "${1}"; git push; }
fixes () { git commit -am "fixes #${1}"; git push; }

git_clone_all () {
  cd ~/git
  parallel -a repos 'git clone git@github.com:fastai/{}.git'
  cd -
}

git_pull_all () {
  pushd ~/git
  parallel -a repos 'echo " # {}" && cd ~/git/{} && git pull'
  popd
}

git_status_rel () {
  pushd ~/git
  parallel -a releases 'echo " # {}" && cd ~/git/{} && git status'
  popd
}

vibash () {
  vim ~/.bashrc
  . ~/.bashrc
}

vibashl () {
  vim ~/.bashrc.local
  . ~/.bashrc
}

eval "$(gh completion -s bash)"

# Vanilla MacOS, based on BSD, has a different `ls`. It uses -G instead
# of --color. The colors are also handled differently (dircolors is not
# available by default; uses different env vars for controlling colors).
#
# Previously depended on a conda environment with GNU coreutils
# installed so that we get the exact same colors as on Linux. That proved
# finicky. See [0] for some details.  so this always uses the system `ls` on Mac, setting the colors to be
# close enough.
#
# The solution here is:
#  - check $LS_COLORS (note underscore) in an environment with dircolors and GNU ls
#  - paste the value of $LS_COLORS into [2]
#  - copy the reported $LSCOLORS (no underscore) value. That will be used by BSD ls.
#  - export LSCOLORS on Mac.
#
# [0] https://github.com/daler/dotfiles/pull/35
# [1] https://superuser.com/a/1746907
# [2] https://geoff.greer.fm/lscolors
#
if [[ $OSTYPE == darwin* ]]; then
    export LSCOLORS=cxgxfxexbxegedabagacad
    alias ls='/bin/ls -G'
else
    if command -v dircolors > /dev/null; then
        test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    fi
    alias ls="ls --color=auto"
fi

# Essential bash completion
if [ -x "$(command -v brew)" ]; then
  if [ -f $(brew --prefix)/etc/bash_completion ]
    then
      source $(brew --prefix)/etc/bash_completion
    fi
  fi

# Fix Catalina zsh shit warning
export BASH_SILENCE_DEPRECATION_WARNING=1

if [ -d $HOME/.modular ]; then
  export MODULAR_HOME="/Users/cvardema/.modular"
  export PATH="/Users/cvardema/.modular/pkg/packages.modular.com_mojo/bin:$PATH"
fi

# Make sure that local bin is in path
#
export PATH="/Users/cvardema/.local/bin:$PATH"

# -------------------------------------------------------------------
#  nbdev + uv helpers  (2025-04-update)
# -------------------------------------------------------------------

export NBDEV_TEMPLATE_REPO="la3d/nbdev-template-cc"   # template repo
export NBDEV_DEFAULT_VIS="--private"                  # default visibility

# ---- ALIASES -------------------------------------------------------
alias uv-sync="uv sync"                               # ‚úÖ no arg needed
alias nb-prep="nbdev_export && nbdev_clean"
alias nb-test="nbdev_test && pytest -q"
alias nb-ci="nb-prep && nb-test"
alias nb-docs="nbdev_preview"

# ---- FUNCTIONS -----------------------------------------------------
nb-new () {
  if [[ -z "$1" ]]; then
    echo "Usage: nb-new <project-name> [-o org] [--public|--private|--internal] [extra gh flags...]"
    return 1
  fi

  local PRJ="$1"; shift
  local ORG=""; local VIS="$NBDEV_DEFAULT_VIS"; local GHFLAGS=()

  while (( "$#" )); do
    case "$1" in
      -o|--org) ORG="$2"; shift 2 ;;
      --public|--private|--internal) VIS="$1"; shift ;;
      *) GHFLAGS+=("$1"); shift ;;
    esac
  done

  local TARGET_REPO="${ORG:+$ORG/}$PRJ"

  echo "üöÄ Creating & cloning $TARGET_REPO from $NBDEV_TEMPLATE_REPO ($VIS)‚Ä¶"
  gh repo create "$TARGET_REPO" \
      --template "$NBDEV_TEMPLATE_REPO" \
      "$VIS" -c -y "${GHFLAGS[@]}" || return 1   # -c==--clone, -y skips prompt

  cd "$PRJ" || return 1

  echo "üì¶ Syncing dev environment with uv‚Ä¶"
  uv-sync || return 1

  echo "üìù Generating nbdev settings.ini‚Ä¶"
  nbdev_create_config --repo "$TARGET_REPO" \
      --author "$(git config user.name)" \
      --description "$PRJ library"

  git add .
  git commit -m "Initial nbdev scaffolding"
  git push -u origin main
  echo "‚úÖ  Project $TARGET_REPO ready!"
}

# run the whole pipeline locally
nb-runall () { uv-sync && nb-ci; }
